Методы - функции связанные со значениями конкретного типа
у метода перед име­нем функции добавляется один дополнительный
параметр, называемый параметром получателя
Методы  могут иметь одинаковое имена, но тогда они должны быть определены для разных типов
/*
func (m MyType) sayHi() {
	fmt.Println("Hi from", m)
	}

(m MyType)
"m" - имя параметра получателя
"MyType" - тип параметра получателя */ 
Вызов метода, который вы определили, состоит из значения, для которого вызы­
вается метод, точки, имени вызываемого метода и пары круглых скобок. Значение,
для которого вызывается метод, называется получателем метода.
/*
value := MyType("a MyType value")
value.sayHi() // value - получатель метода, sayHi - Имя метода
*/
Метод может иметь так же обычные параметры и возвращать значения
/*
type MyType string

func (m *MyType) MethodWithParameters(number int, flag bool) int {
	*m = "Hello" + *m
	fmt.Printf("m: %s\n", *m)
	fmt.Printf("number: %v\n", number)
	fmt.Printf("Flag: %v\n", flag)
	return len(*m)
}

func main() {
	value := MyType("Vyacheslav")
	fmt.Printf("Len value: %v\n", value.MethodWithParameters(3, true))
	fmt.Printf("Value in main: %s\n", value)
}
// => m: Hello Vyacheslav
// => number: 3
// => Flag: true
// => Len value: 16
// => Value in main: Hello Vyacheslav
*/
// Так как в метод и функцию передается копия параметров, значение переменной определенной
// в функции main не изменится, что бы значение менялось необходимо использовать 
// указатель в качестве параметра получателя (m *MyType), Также необходимо изменить блок метода
// чтобы в нем изменялось, выводилось и возвращалось значение по указателю
Изменять вызов метода не нужно. При вызове метода, которому требуется получатель-указатель
на переменную, не обладающую типом указателя, Go автоматически преобразует получатель в указатель.
То же относится к переменным с типами указателей; при вызове метода, требующего получателя значения,
Go автоматически получит значение по указателю и передаст его методу.

!!! ОБЩЕПРИНЯТОЕ СОГЛАШЕНИЕ: для единства стиля у всех методов типа получателем должно быть
либо значение, либо указатель; смешивать их не рекомендуется.
// -----------------------------------------------------------------------------------------------------
// ПРИМЕР
package main

import (
	"fmt"
)

type Liters float64
type Milliliters float64
type Gallons float64

func (l Liters) ToGallons() Gallons { // у метода имя "ToGallons", но определен он для типа "Liters"
	return Gallons(l * 0.264)
}

func (m Milliliters) ToGallons() Gallons { // у метода имя "ToGallons", но определен он для типа "Milliliters"
	return Gallons(m * 0.000264)
}

func main() {
	soda := Liters(2).ToGallons() // создаем переменную с типом "liters", значением "2" и сразу вызываем для нее метод "ToGallons"
	fmt.Printf("2 liters aquals %0.3f gallons\n", soda)
	watter := Milliliters(500) // здесь просто создаем переменную с типом "Milliliters", значением "500"
	// а метод "ToGallons" для нее вызываем в строке "Printf"
	fmt.Printf("%0.3f milliliters equals %0.3f gallons\n", watter, watter.ToGallons())
}