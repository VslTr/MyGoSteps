ФУНКЦИИ

/* • Имя должно начинаться с буквы, за которой
следует произвольное количество букв и
цифр. (При нарушении этого правила выда-
ется ошибка компиляции.)
• Функция, имя которой начинается с буквы
верхнего регистра, экспортируется и может
использоваться вне текущего пакета. Если
функция должна использоваться только вну-
три текущего пакета, начните ее имя с буквы
нижнего регистра.
• Имена, состоящие из нескольких слов, долж-
ны записываться в верблюжьем регистре. */

// Параметр функции — переменная, локальная по отношению к функции, значение которой задается при вызове функции
// func tmp(line string, times int) // в скобках указывается парметр функции и его тип
// Функция может возвращать значение.

/* Функция всегда возвращает значение конкретного типа (и только этого типа).
Чтобы объявить, что функция возвращает значение, добавьте тип возвращае-
мого значения после параметров в объявлении функции. Затем добавьте в блок
функции ключевое слово return, за которым следует возвращаемое значение.
Если возвращаемых значений несколько то они заключаются в скобки.
Можно возвращаемым значениям дать имена как и параметрам => func double(number float64) ( returned1 float64,  returned2 int) {
func double(number float64) float64 {	// "float64" после скобок - тип возвращвемого значения
return number * 2
} */

Функции могут быть с переменным количеством аргументов

// Чтобы функция могла получать переменное количество аргументов,
// поставьте многоточие (...) перед типом последнего (или единственного) параметра
// функции в ее объявлении.
/*
func myFunc(param1 int, param2 ...float64) {
	// код функции
	}
*/
// В последнем параметре функции с переменным количеством аргументов передается срез (slice),
// который может обрабатываться функцией как любой другой срез.
// если переменную часть аргументов не передать, ошибки не будет; функция просто получает пустой срез.
/*
Функция также может получать один или несколько фиксированных аргументов. Если при вызове пере-
менную часть аргументов можно опускать (что приведет к созданию пустого сегмента), фиксированные
аргументы всегда обязательны; если опустить их, произойдет ошибка компиляции. Переменным может
быть только последний параметр в определении функции; он не может предшествовать обязательным
параметрам.
Функция "myFunc" рассчитывает получить один фиксированный аргумент типа int 
и несколько аргументов float64.
Если нужно передать срез значений float64 то
при вызове функции с переменным количеством аргументов
просто добавьте многоточие (...) после среза, который должен
использоваться вместо переменного количества аргументов.
number := 33
numbers := []int{32.34, 24.78, 89.00}
fmt.Printf("некий текст: %0.2f\n", myFunc(number, numbers...))
*/

package main

import (
	"fmt"
	"log"
)

func paintNeeded(width float64, height float64) (float64, error) {
	if width < 0 {
		return 0, fmt.Errorf("a width of %0.2f is invalid", width)
	}
	if height < 0 {
		return 0, fmt.Errorf("a hight of %0.2f is invalid", height)
	}
	area := width * height
	return area / 10.0, nil
}

func main() {
	amount, err := paintNeeded(4.2, 3.0)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%0.2f liters needed\n", amount)
}
